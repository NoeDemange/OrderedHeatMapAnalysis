d <- as.dendrogram(HC)
dper <- as.dendrogram(HC_per)
d_test <- as.dendrogram.hclust(HC_per)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
HCper <- permute(HC,OrdSer)
inherits(HCper,"hclust")
inherits(as.dendrogram(HCper)$obj,"hclust")
Dper<-as.dendrogram(HCper)
Dper
Dper$obj
inherits(Dper,"hclust")
length(HCper$order)
nobs(HCper$order)
nobs(Dper)
HCper
HC
as.dendrogram(HC)
as.dendrogram(permute(HC,ser_permutation(OrdSer))
)
as.dendrogram(permute(HC,ser_permutation_vector(OrdSer))
)
get_order(HCper)
HCper$height
getOption("max.print")
getOption("max.print") = 1004
Option("max.print")
setOption("max.print")
HCper$height[1002]
HCper$height[1003]
HCper$height[1004]
HCper$height[1005]
HC$height[1003]
HCper$merde
HCper$merge
HCper$merge[<1]
HCper$merge[,1]
HCper$merge
HC$merge
max(HC$merge[,1])
max(HC$merge[,2])
max(HCper$merge[,2])
max(HCper$merge[,1])
is.leaf(Dper)
is.leaf(Dper[])
is.leaf(Dper[1])
Dper[2]
HC$merge
HCper$merge
HCper$order
HCper$merge
min(HCper$merge)
min(HCper$merge[,1])
min(HCper$merge[,2])
min(HC$merge[,2])
min(HC$merge[,1])
golem::run_dev()
min(HC$merge[,2])
min(HC$merge[,1])
HCper <- permute(HC,OrdSer)
min(HCper$merge[,1])
min(HCper$merge[,2])
golem::run_dev()
HCper <- permute(HC,OrdSer)
is.na(HCper$merge)
is.na(HCper$order)
is.na(HCper$order)==TRUE
which(is.na(HCper$order))
HCper$order[which(is.na(HCper$order))]
HCper$order[which(is.na(HCper$order)==TRUE)]
HCper$order[which(is.na(HCper$order)==FALSE)]
Hwhich(is.na(HCper$order)==FALSE)
which(is.na(HCper$order)==FALSE)
which(is.na(HCper$merge)==TRUE)
which(is.na(HCper$merge)==FALSE)
is.na(HCper$merge)
is.na(HCper$merge[,1])
is.na(HCper$merge[,2])
is.na(HCper$merge[,3])
golem::run_dev()
golem::run_dev()
golem::run_dev()
unique(HC$merge)
unique(HC$merge[,1])
is.unique(HC$merge[,1])
!unique(HC$merge[,1])
HC$merge[,1]==unique(HC$merge[,1])
HC$merge[,1]==unique(HC$merge[,2])
HC$merge[,2]==unique(HC$merge[,2])
HC$merge==unique(HC$merge)
HCper <- permute(HC,OrdSer)
HCper$merge==unique(HCper$merge)
unique(HCper$merge[,1])
length(unique(HCper$merge[,1]))
length(unique(HCper$merge[,2]))
length(unique(HCper$merge))
golem::run_dev()
length(unique(OrdSer))
HCper <- permute(HC,OrdSer)
plot(HCper)
pdf()
plot(HCper)
dev.off()
pdf("test.pdf")
plot(HCper)
dev.off()
pdf("test1.pdf")
plot(HCper, hang=-1, labels=FALSE)
dev.off()
pdf("permute.pdf")
plot(HCper, hang=-1, labels=FALSE)
dev.off()
pdf("initial.pdf")
plot(HC, hang=-1, labels=FALSE)
dev.off()
pdf("initial_dend.pdf")
plot(as.dendrogram(HC), hang=-1, labels=FALSE)
plot(as.dendrogram(HC), labels=FALSE)
plot(as.dendrogram(HC))
dev.off()
pdf("permute_dend.pdf")
plot(as.dendrogram(HCper))
dev.off()
Dper <- as.dendrogram(HCper)
class(Dper)
nleaves(Dper)
Dper %>% nleaves
D <- as.dendrogram(HC)
nleaves(D)
D %>% nleaves
D %>% nobs
D %>% nobs()
Dper_data <- dendro_data(Dper,type="rectangle")
install.packages("ggdendro")
Dper_data <- dendro_data(Dper,type="rectangle")
library(ggdendro)
Dper_data <- dendro_data(Dper,type="rectangle")
D_data <- dendro_data(D,type="rectangle")
remove.packages("ggdendro")
golem::run_dev()
D <- as.dendrogram(HC)
ord <- DendSer.dendrogram(D,r$distml_ml(),cost=costARc)
library(dendextend)
ord <- DendSer.dendrogram(D,r$distml_ml(),cost=costARc)
ord <- DendSer.dendrogram(D,r$distml_ml())
ord <- DendSer.dendrogram(D,r$distml_ml
)
golem::run_dev()
golem::run_dev()
D <- as.dendrogram(HC)
ord <- DendSer.dendrogram(D,dist,cost=costARc)
library(dendextend)
ord <- DendSer.dendrogram(D,dist,cost=costARc)
DendSer.dendrogram()
DendSer.dendrogram
h <- as.hclust(D)
name <- HC$labels[OrdSer]
str(D)
order.dendrogram(D) <- name
length(unique(name))
order.dendrogram(D) <- OrdSer
D <- as.dendrogram(HC)
D <- order.dendrogram(D) <- OrdSer
D <- as.dendrogram(HC)
order.dendrogram(D) <- OrdSer
golem::run_dev()
golem::run_dev()
library(dendextend)
HCper <- permute(HC,OrdSer)
grDevices::pdf("HCper")
plot(HCper)
grDevices::dev.off()
grDevices::pdf("HCper.pdf")
plot(HCper,hang=-1)
grDevices::pdf("HCper.pdf")
grDevices::dev.off()
grDevices::pdf("HCper.pdf")
plot(HCper,hang=-1)
grDevices::dev.off()
grDevices::dev.off()
grDevices::pdf("HCper1.pdf")
plot(HCper,hang=-1)
grDevices::dev.off()
D <- as.dendrogram(HC)
order.dendrogram(D) <- get_order(HCper)
grDevices::pdf("dendper.pdf")
plot(D)
grDevices::dev.off()
grDevices::pdf("HCper1.pdf")
plot(HCper,hang=-1,ylab="",xlab="")
grDevices::dev.off()
ordHC = get_order(HCper)
ordD = get_order(D)
ordD==ordHC
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
class(dend'
)
''
class(dend)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
View(dend)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::set_golem_name("OrderedHeatMapAnalysis")
golem::run_dev()
install.packages("changer")
getwd()
changer(getwd(),new_name="OrderedHeatMapAnalysis")
library(changer)
changer(getwd(),new_name="OrderedHeatMapAnalysis")
update("Bioconductor")
BiocManager::version()
install.packages("BiocManager", repos = "https://cloud.r-project.org")
install.packages("BiocManager", repos = "https://cloud.r-project.org")
BiocManager::version()
BiocManager::install(version="3.18")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
remove.packages("rlang")
install.packages("rlang")
changer(getwd(),new_name="OrderedHeatMapAnalysis")
library(changer)
changer(getwd(),new_name="OrderedHeatMapAnalysis")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
## Add modules ----
## Create a module infrastructure in R/
golem::add_module(name = "introduction", with_test = FALSE)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
head(datamat)
summary(datamat)
row.names(head(datamat))
col.names(head(datamat))
column.names(head(datamat))
rownames(head(datamat))
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "OrderedHeatMapAnalysis", # The Name of the package containing the App
pkg_title = "OHMA", # The Title of the package containing the App
pkg_description = "Optimised direct visualization and analysis of matrix data structure.", # The Description of the package containing the App
author_first_name = "Noe", # Your First Name
author_last_name = "Demange", # Your Last Name
author_email = "demange.noe@outlook.fr", # Your Email
repo_url = "https://github.com/NoeDemange/OrderedHeatMapAnalysis" # The URL of the GitHub Repo (optional)
)
golem::run_dev()
golem::run_dev()
golem::run_dev()
install.packages("stringi")
stri_escape_unicode("é")
library(stringi)
stri_escape_unicode("é")
golem::run_dev()
stri_escape_unicode("*")
library(stringi)
showNonASCIIfile("~/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/OrderedHeatMapAnalysis/R/mod_data_loading.R")
library(tools, lib.loc = "C:/Program Files/R/R-4.3.2/library")
showNonASCIIfile("~/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/OrderedHeatMapAnalysis/R/mod_data_loading.R")
showNonASCIIfile("~/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/OrderedHeatMapAnalysis/R/mod_data_loading.R")
showNonASCIIfile("~/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/OrderedHeatMapAnalysis/R/mod_data_processing.R")
showNonASCIIfile("~/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/OrderedHeatMapAnalysis/R/mod_data_processing.R")
showNonASCIIfile("~/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/OrderedHeatMapAnalysis/R/mod_heatmap_analysis.R")
showNonASCIIfile("~/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/OrderedHeatMapAnalysis/R/mod_heatmap_analysis.R")
showNonASCIIfile("~/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/OrderedHeatMapAnalysis/R/mod_heatmap_split.R")
showNonASCIIfile("~/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/OrderedHeatMapAnalysis/R/mod_heatmap_split.R")
showNonASCIIfile("~/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/OrderedHeatMapAnalysis/R/mod_information.R")
stri_escape_unicode("é")
showNonASCIIfile("~/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/OrderedHeatMapAnalysis/R/mod_information.R")
showNonASCIIfile("~/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/OrderedHeatMapAnalysis/R/mod_introduction.R")
stri_escape_unicode("É")
showNonASCIIfile("~/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/OrderedHeatMapAnalysis/R/mod_introduction.R")
showNonASCIIfile("~/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/OrderedHeatMapAnalysis/R/mod_introduction.R")
golem::run_dev()
golem::run_dev()
build_readme()
library(devtools)
build_readme()
golem::run_dev()
## Run checks ----
## Check the package before sending to prod
devtools::check()
## If you want to deploy to ShinyProxy
golem::add_dockerfile_with_renv_shinyproxy()
## If you want to deploy to ShinyProxy
golem::add_dockerfile_with_renv_shinyproxy()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
hc <- hclust(dist(USArrests[1:4, ]), "ave")
dend <- as.dendrogram(hc)
str(dend)
order.dendrogram(dend) # 4 3 1 2
order.dendrogram(dend) <- 1:4
library(dendextend)
order.dendrogram(dend) <- 1:4
order.dendrogram(dend) # 1 2 3 4
str(dend)
dend <- as.dendrogram(hc)
str(dend)
order.dendrogram(dend) # 4 3 1 2
plot(dend)
order.dendrogram(dend) <- 1:4
order.dendrogram(dend) # 1 2 3 4
plot(dend)
str(dend)
plot(dend)
hc <- hclust(dist(USArrests[1:4, ]), "ave")
dend <- as.dendrogram(hc)
str(dend)
head(dend)
dend
order.dendrogram(dend) <- 1:4
str(dend)
dend[[1]]
dend <- as.dendrogram(hc)
dend[[1]]
order.dendrogram(dend) # 4 3 1 2
dend[[1]]
dend[[4]]
dend[[3]]
dend[[0]]
dend[[2]]
dend[[1]]
labels(dend)
order.dendrogram(dend) <- 1:4
hc <- hclust(dist(USArrests[1:4, ]), "ave")
dend <- as.dendrogram(hc)
labels(dend)
order.dendrogram(dend) # 4 3 1 2
order.dendrogram(dend) <- 1:4
order.dendrogram(dend) # 1 2 3 4
labels(dend)
dend <- as.dendrogram(hc)
str(dend)
order.dendrogram(dend) # 4 3 1 2
dend <- order.dendrogram(dend) <- 1:4
dend <- as.dendrogram(hc)
str(dend)
order.dendrogram(dend) # 4 3 1 2
dend = order.dendrogram(dend) <- 1:4
hc <- hclust(dist(USArrests[1:6, ]), "ave")
dend <- as.dendrogram(hc)
sub_dend <- dend[[1]]
order.dendrogram(sub_dend) # 4 6
order.dendrogram(sub_dend) <- rank(order.dendrogram(sub_dend), ties.method = "first")
labels(as.hclust(sub_dend))
rank(order.dendrogram(sub_dend), ties.method = "first")
hc <- hclust(dist(USArrests[1:6, ]), "ave")
dend <- as.dendrogram(hc)
sub_dend <- dend[[1]]
order.dendrogram(sub_dend) # 4 6
rank(order.dendrogram(sub_dend), ties.method = "first")
sub_dend
str(sub_dend)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
pkg_path()
library(golem)
pkg_path()
detach("package:golem", unload = TRUE)
golem::run_dev()
library(golem)
get_golem_wd()
golem::run_dev()
library(pkgload)
load_all(compile = TRUE)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
cth
golem::run_dev()
cth
max(cth)
golem::run_dev()
max(cth)
cth[]==0
which(cth[]==0)
count(which(cth[]==0))
length(which(cth[]==0))
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
cth
golem::run_dev()
golem::run_dev()
cth
input$minsize_row
input$ds_row
cth
cth
golem::run_dev()
