golem::run_dev()
golem::run_dev()
usethis::use_package("grDevices")
usethis::use_package("circlize")
usethis::use_package("circlize")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
cth
golem::run_dev()
vcutch
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
usethis::use_package("ecp")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::add_module(name = "heatmap_analysis", with_test = FALSE) # Name of the module
library(reactlog)
reactlog_enable()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
reactlog_enable()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
usethis::use_package("tseries")
usethis::use_package("tseries")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
sp
golem::run_dev()
golem::run_dev()
vGroup
vGroup
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
vGroup
vGroup
golem::run_dev()
golem::run_dev()
golem::run_dev()*
golem::run_dev()*
golem::run_dev()
vgroup
vGroup
vGroup
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
library("devtools")
devtools::build_readme()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
Q
Q
golem::run_dev()
golem::run_dev()
co
cat(co)
ro
print(ro)
golem::run_dev()
co
head(co)
co[1]
gr
golem::run_dev()
cth
cth
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
usethis::use_package("graphics")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
# You're now set! ----
# go to dev/03_deploy.R
rstudioapi::navigateToFile("dev/03_deploy.R")
## Run checks ----
## Check the package before sending to prod
devtools::check()
rhub::check_for_cran()
tempdir()
tempdir()
tempdir()
## If you want to deploy to ShinyProxy
golem::add_dockerfile_with_renv_shinyproxy()
## If you want to deploy to ShinyProxy
golem::add_dockerfile_with_renv_shinyproxy()
install.packages("BiocManager")
golem::add_dockerfile_with_renv_shinyproxy()
library(BiocGenerics)
library(BiocManager)
library(ComplexHeatmap)
library(ComplexHeatmap)
install.packages("dockerfiler")
golem::add_dockerfile_with_renv_shinyproxy()
usethis::use_package("tseries")
## If you want to deploy to ShinyProxy
golem::add_dockerfile_with_renv_shinyproxy()
## If you want to deploy to ShinyProxy
golem::add_dockerfile_with_renv_shinyproxy()
## If you want to deploy to ShinyProxy
golem::add_dockerfile_with_renv_shinyproxy()
golem::run_dev()
golem::run_dev()
golem::run_dev()
## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "biseriatedheatmaps", # The Name of the package containing the App
pkg_title = "BSH", # The Title of the package containing the App
pkg_description = "Optimised direct visualization and analysis of matrix data structure.", # The Description of the package containing the App
author_first_name = "Noe", # Your First Name
author_last_name = "Demange", # Your Last Name
author_email = "demange.noe@outlook.fr", # Your Email
repo_url = "https://github.com/NoeDemange/biseriatedheatmaps" # The URL of the GitHub Repo (optional)
)
devtools::build_readme()
## Run checks ----
## Check the package before sending to prod
devtools::check()
## If you want to deploy to ShinyProxy
golem::add_dockerfile_with_renv_shinyproxy()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
datf <- utils::read.csv("D:/documents/stage/stage g.sapriel/Dossier_NOE/stage 2/dataset/Metabarcoding1_OK.csv",
header = TRUE,
sep = input$sep,
row.names =1
)
datf <- utils::read.csv("D:/documents/stage/stage g.sapriel/Dossier_NOE/stage 2/dataset/Metabarcoding1_OK.csv",
header = TRUE,
sep = ",",
row.names =1
)
View(datf)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
library(devtools)
install_github("jokergoo/InteractiveComplexHeatmap")
library(abind)
detach("package:abind", unload = TRUE)
detach("package:devtools", unload = TRUE)
detach("package:usethis", unload = TRUE)
detach("package:base", unload = TRUE)
detach("package:datasets", unload = TRUE)
detach("package:graphics", unload = TRUE)
detach("package:grDevices", unload = TRUE)
detach("package:methods", unload = TRUE)
detach("package:stats", unload = TRUE)
detach("package:utils", unload = TRUE)
library(devtools)
install_github("jokergoo/InteractiveComplexHeatmap")
install.packages(c("ade4", "agricolae", "ape", "attachment", "BH", "BiocManager", "broom", "cachem", "car", "classInt", "cli", "clue", "coin", "colorspace", "config", "credentials", "curl", "data.table", "dendextend", "DescTools", "devtools", "digest", "dplyr", "DT", "e1071", "ecp", "ellipse", "Exact", "expm", "FactoMineR", "fansi", "fastmap", "forcats", "fs", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "gh", "gld", "golem", "gtable", "haven", "hms", "htmltools", "httpuv", "hunspell", "installr", "jsonlite", "klaR", "labelled", "later", "libcoin", "lme4", "lmom", "lpSolve", "magick", "mapproj", "maps", "MASS", "MatrixModels", "matrixStats", "minqa", "multcomp", "multcompView", "mvtnorm", "pak", "parsedate", "pbkrtest", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "promises", "ps", "purrr", "quantmod", "quantreg", "questionr", "rcompanion", "Rcpp", "RcppEigen", "RcppParallel", "readr", "readxl", "rematch", "remotes", "renv", "rhub", "rlang", "rootSolve", "rstatix", "rversions", "scatterplot3d", "seriation", "sp", "spelling", "stringi", "styler", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tseries", "TSP", "tzdb", "usethis", "utf8", "uuid", "vctrs", "viridis", "vroom", "waldo", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("ade4", "agricolae", "ape", "attachment", "BH", "BiocManager", "broom", "cachem", "car", "classInt", "cli", "clue", "coin", "colorspace", "config", "credentials", "curl", "data.table", "dendextend", "DescTools", "devtools", "digest", "dplyr", "DT", "e1071", "ecp", "ellipse", "Exact", "expm", "FactoMineR", "fansi", "fastmap", "forcats", "fs", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "gh", "gld", "golem", "gtable", "haven", "hms", "htmltools", "httpuv", "hunspell", "installr", "jsonlite", "klaR", "labelled", "later", "libcoin", "lme4", "lmom", "lpSolve", "magick", "mapproj", "maps", "MASS", "MatrixModels", "matrixStats", "minqa", "multcomp", "multcompView", "mvtnorm", "pak", "parsedate", "pbkrtest", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "promises", "ps", "purrr", "quantmod", "quantreg", "questionr", "rcompanion", "Rcpp", "RcppEigen", "RcppParallel", "readr", "readxl", "rematch", "remotes", "renv", "rhub", "rlang", "rootSolve", "rstatix", "rversions", "scatterplot3d", "seriation", "sp", "spelling", "stringi", "styler", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tseries", "TSP", "tzdb", "usethis", "utf8", "uuid", "vctrs", "viridis", "vroom", "waldo", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("ade4", "agricolae", "ape", "attachment", "BH", "BiocManager", "broom", "cachem", "car", "classInt", "cli", "clue", "coin", "colorspace", "config", "credentials", "curl", "data.table", "dendextend", "DescTools", "devtools", "digest", "dplyr", "DT", "e1071", "ecp", "ellipse", "Exact", "expm", "FactoMineR", "fansi", "fastmap", "forcats", "fs", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "gh", "gld", "golem", "gtable", "haven", "hms", "htmltools", "httpuv", "hunspell", "installr", "jsonlite", "klaR", "labelled", "later", "libcoin", "lme4", "lmom", "lpSolve", "magick", "mapproj", "maps", "MASS", "MatrixModels", "matrixStats", "minqa", "multcomp", "multcompView", "mvtnorm", "pak", "parsedate", "pbkrtest", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "promises", "ps", "purrr", "quantmod", "quantreg", "questionr", "rcompanion", "Rcpp", "RcppEigen", "RcppParallel", "readr", "readxl", "rematch", "remotes", "renv", "rhub", "rlang", "rootSolve", "rstatix", "rversions", "scatterplot3d", "seriation", "sp", "spelling", "stringi", "styler", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tseries", "TSP", "tzdb", "usethis", "utf8", "uuid", "vctrs", "viridis", "vroom", "waldo", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
library(devtools)
library(devtools)
install.packages(c("cli", "rlang"))
install.packages(c("cli", "rlang"))
library(devtools)
remove.packages("cli")
install.packages("cli")
library(devtools)
install_github("jokergoo/InteractiveComplexHeatmap")
golem::run_dev()
usethis::use_package("InteractiveComplexHeatmap")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
usethis::use_package("InteractiveComplexHeatmap")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
usethis::use_package("InteractiveComplexHeatmap")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
reactlog::reactlog_enable(
)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
usethis::use_package("InteractiveComplexHeatmap")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
htShinyExample()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
## Run checks ----
## Check the package before sending to prod
devtools::check()
## If you want to deploy to ShinyProxy
golem::add_dockerfile_with_renv_shinyproxy()
golem::run_dev()
golem::run_dev()
library(golem)
golem::run_dev()
golem::run_dev()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(golem)
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
golem::run_dev("dev/run_dev.R")
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.package('attachment') # if needed.
attachment::att_amend_desc()
golem::run_dev("dev/run_dev.R")
golem::run_dev()
# go to dev/02_dev.R
rstudioapi::navigateToFile("dev/02_dev.R")
## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "biseriatedheatmaps", # The Name of the package containing the App
pkg_title = "BSH", # The Title of the package containing the App
pkg_description = "Optimised direct visualization and analysis of matrix data structure.", # The Description of the package containing the App
author_first_name = "Noe", # Your First Name
author_last_name = "Demange", # Your Last Name
author_email = "demange.noe@outlook.fr", # Your Email
repo_url = "https://github.com/NoeDemange/biseriatedheatmaps" # The URL of the GitHub Repo (optional)
)
## Set {golem} options ----
golem::set_golem_options()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
View(app_server)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
View(Heatmapsimple)
Heatmapsimple@column_dend_list$obj
Heatmapsimple@column_dend_param$obj
Heatmapsimple@row_dend_param
Heatmapsimple@column_dend_param
Heatmapsimple
Heatmapsimple@row_dend_param$obj$order
Heatmapsimple@column_dend_param$obj$order
golem::run_dev()
View(dend)
dend$order
dend
dend$obj
golem::run_dev()
View(dendc)
dendc
Heatmapsimple
Heatmapsimple@column_dend_param
Heatmapsimple@column_dend_param$obj
Heatmapsimple@column_dend_param$obj$order
Heatmapsimple@dend_param$obj$order
dend_param$obj$order
dendc$obj$order
dendc$param$obj$order
dendc$obj
dendc
Heatmapsimple@dend_param$obj$
dendc <- stats::as.dendrogram(r$HC_c())
Heatmapsimple@column_dend_param$obj
Heatmapsimple@column_dend_param
inherits(Heatmapsimple@column_dend_param$obj, "hclust")
nobs(Heatmapsimple@column_dend_param$obj)
nobs(Heatmapsimple@row_dend_param$obj)
Heatmapsimple@row_dend_param$obj
golem::run_dev()
Heatmapsimple@row_dend_param$obj
golem::run_dev()
HC
HC$height
HC$order
as.dendrogram(HC)
OrdSer
which(OrdSer != OrdSer)
as.dendrogram(seriation::permute(HC, OrdSer))
seriation::permute(HC, OrdSer)
HC_test <- permute(HC,OrdSer)
dend_test <- as.dendrogram(HC_test)
dend_test
dend_test[1]
dend_test$members
dend_test$
HC <-  seriation::permute(HC, OrdSer)
dend_test <- as.dendrogram(HC_test)
nobs(dend_test)
nobs(dend_test[1])
nobs(dend_test)
length(unique(OrdSer))
golem::run_dev()
