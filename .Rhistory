golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
library(devtools)
install_github("jokergoo/InteractiveComplexHeatmap")
library(abind)
detach("package:abind", unload = TRUE)
detach("package:devtools", unload = TRUE)
detach("package:usethis", unload = TRUE)
detach("package:base", unload = TRUE)
detach("package:datasets", unload = TRUE)
detach("package:graphics", unload = TRUE)
detach("package:grDevices", unload = TRUE)
detach("package:methods", unload = TRUE)
detach("package:stats", unload = TRUE)
detach("package:utils", unload = TRUE)
library(devtools)
install_github("jokergoo/InteractiveComplexHeatmap")
install.packages(c("ade4", "agricolae", "ape", "attachment", "BH", "BiocManager", "broom", "cachem", "car", "classInt", "cli", "clue", "coin", "colorspace", "config", "credentials", "curl", "data.table", "dendextend", "DescTools", "devtools", "digest", "dplyr", "DT", "e1071", "ecp", "ellipse", "Exact", "expm", "FactoMineR", "fansi", "fastmap", "forcats", "fs", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "gh", "gld", "golem", "gtable", "haven", "hms", "htmltools", "httpuv", "hunspell", "installr", "jsonlite", "klaR", "labelled", "later", "libcoin", "lme4", "lmom", "lpSolve", "magick", "mapproj", "maps", "MASS", "MatrixModels", "matrixStats", "minqa", "multcomp", "multcompView", "mvtnorm", "pak", "parsedate", "pbkrtest", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "promises", "ps", "purrr", "quantmod", "quantreg", "questionr", "rcompanion", "Rcpp", "RcppEigen", "RcppParallel", "readr", "readxl", "rematch", "remotes", "renv", "rhub", "rlang", "rootSolve", "rstatix", "rversions", "scatterplot3d", "seriation", "sp", "spelling", "stringi", "styler", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tseries", "TSP", "tzdb", "usethis", "utf8", "uuid", "vctrs", "viridis", "vroom", "waldo", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("ade4", "agricolae", "ape", "attachment", "BH", "BiocManager", "broom", "cachem", "car", "classInt", "cli", "clue", "coin", "colorspace", "config", "credentials", "curl", "data.table", "dendextend", "DescTools", "devtools", "digest", "dplyr", "DT", "e1071", "ecp", "ellipse", "Exact", "expm", "FactoMineR", "fansi", "fastmap", "forcats", "fs", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "gh", "gld", "golem", "gtable", "haven", "hms", "htmltools", "httpuv", "hunspell", "installr", "jsonlite", "klaR", "labelled", "later", "libcoin", "lme4", "lmom", "lpSolve", "magick", "mapproj", "maps", "MASS", "MatrixModels", "matrixStats", "minqa", "multcomp", "multcompView", "mvtnorm", "pak", "parsedate", "pbkrtest", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "promises", "ps", "purrr", "quantmod", "quantreg", "questionr", "rcompanion", "Rcpp", "RcppEigen", "RcppParallel", "readr", "readxl", "rematch", "remotes", "renv", "rhub", "rlang", "rootSolve", "rstatix", "rversions", "scatterplot3d", "seriation", "sp", "spelling", "stringi", "styler", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tseries", "TSP", "tzdb", "usethis", "utf8", "uuid", "vctrs", "viridis", "vroom", "waldo", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("ade4", "agricolae", "ape", "attachment", "BH", "BiocManager", "broom", "cachem", "car", "classInt", "cli", "clue", "coin", "colorspace", "config", "credentials", "curl", "data.table", "dendextend", "DescTools", "devtools", "digest", "dplyr", "DT", "e1071", "ecp", "ellipse", "Exact", "expm", "FactoMineR", "fansi", "fastmap", "forcats", "fs", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "gh", "gld", "golem", "gtable", "haven", "hms", "htmltools", "httpuv", "hunspell", "installr", "jsonlite", "klaR", "labelled", "later", "libcoin", "lme4", "lmom", "lpSolve", "magick", "mapproj", "maps", "MASS", "MatrixModels", "matrixStats", "minqa", "multcomp", "multcompView", "mvtnorm", "pak", "parsedate", "pbkrtest", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "promises", "ps", "purrr", "quantmod", "quantreg", "questionr", "rcompanion", "Rcpp", "RcppEigen", "RcppParallel", "readr", "readxl", "rematch", "remotes", "renv", "rhub", "rlang", "rootSolve", "rstatix", "rversions", "scatterplot3d", "seriation", "sp", "spelling", "stringi", "styler", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tseries", "TSP", "tzdb", "usethis", "utf8", "uuid", "vctrs", "viridis", "vroom", "waldo", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
library(devtools)
library(devtools)
install.packages(c("cli", "rlang"))
install.packages(c("cli", "rlang"))
library(devtools)
remove.packages("cli")
install.packages("cli")
library(devtools)
install_github("jokergoo/InteractiveComplexHeatmap")
golem::run_dev()
usethis::use_package("InteractiveComplexHeatmap")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
usethis::use_package("InteractiveComplexHeatmap")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
usethis::use_package("InteractiveComplexHeatmap")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
reactlog::reactlog_enable(
)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
usethis::use_package("InteractiveComplexHeatmap")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
htShinyExample()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
## Run checks ----
## Check the package before sending to prod
devtools::check()
## If you want to deploy to ShinyProxy
golem::add_dockerfile_with_renv_shinyproxy()
golem::run_dev()
golem::run_dev()
library(golem)
golem::run_dev()
golem::run_dev()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(golem)
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
golem::run_dev("dev/run_dev.R")
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.package('attachment') # if needed.
attachment::att_amend_desc()
golem::run_dev("dev/run_dev.R")
golem::run_dev()
# go to dev/02_dev.R
rstudioapi::navigateToFile("dev/02_dev.R")
## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "biseriatedheatmaps", # The Name of the package containing the App
pkg_title = "BSH", # The Title of the package containing the App
pkg_description = "Optimised direct visualization and analysis of matrix data structure.", # The Description of the package containing the App
author_first_name = "Noe", # Your First Name
author_last_name = "Demange", # Your Last Name
author_email = "demange.noe@outlook.fr", # Your Email
repo_url = "https://github.com/NoeDemange/biseriatedheatmaps" # The URL of the GitHub Repo (optional)
)
## Set {golem} options ----
golem::set_golem_options()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
View(app_server)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
View(Heatmapsimple)
Heatmapsimple@column_dend_list$obj
Heatmapsimple@column_dend_param$obj
Heatmapsimple@row_dend_param
Heatmapsimple@column_dend_param
Heatmapsimple
Heatmapsimple@row_dend_param$obj$order
Heatmapsimple@column_dend_param$obj$order
golem::run_dev()
View(dend)
dend$order
dend
dend$obj
golem::run_dev()
View(dendc)
dendc
Heatmapsimple
Heatmapsimple@column_dend_param
Heatmapsimple@column_dend_param$obj
Heatmapsimple@column_dend_param$obj$order
Heatmapsimple@dend_param$obj$order
dend_param$obj$order
dendc$obj$order
dendc$param$obj$order
dendc$obj
dendc
Heatmapsimple@dend_param$obj$
dendc <- stats::as.dendrogram(r$HC_c())
Heatmapsimple@column_dend_param$obj
Heatmapsimple@column_dend_param
inherits(Heatmapsimple@column_dend_param$obj, "hclust")
nobs(Heatmapsimple@column_dend_param$obj)
nobs(Heatmapsimple@row_dend_param$obj)
Heatmapsimple@row_dend_param$obj
golem::run_dev()
Heatmapsimple@row_dend_param$obj
golem::run_dev()
HC
HC$height
HC$order
as.dendrogram(HC)
OrdSer
which(OrdSer != OrdSer)
as.dendrogram(seriation::permute(HC, OrdSer))
seriation::permute(HC, OrdSer)
HC_test <- permute(HC,OrdSer)
dend_test <- as.dendrogram(HC_test)
dend_test
dend_test[1]
dend_test$members
dend_test$
HC <-  seriation::permute(HC, OrdSer)
dend_test <- as.dendrogram(HC_test)
nobs(dend_test)
nobs(dend_test[1])
nobs(dend_test)
length(unique(OrdSer))
golem::run_dev()
golem::run_dev()
dMat
is.na(dMat)
which(is.na(dMat))
integer(0)
dMat$Size
dMat@Size
class(dMat)
as.matrix(dMa)
as.matrix(dMat)
mat <- as.matrix(dMat)
mat
head(dMat)
(dMat)
mat <- as.data.frame(dMat)
mat
mat <- as.matrix(dMat)
is.na(mat)
which(is.na(mat))
mat[which(is.na(mat))]
mat[(is.na(mat)]
mat
golem::run_dev()
class(OrdSer)
OrdSer_test <- ser_permutation(OrdSer)
OrdSer <- OrdSer_test
golem::run_dev()
golem::run_dev()
plot(hc)
plot(HC)
plot(HC)
HC$order
HC$height
HC_per <- permute(HC,OrdSer)
get_order(HC)
get_order(HC_ser)
get_order(HC_per)
as.dendrogram.twinspan(HC)
d <- as.dendrogram(HC)
dper <- as.dendrogram(HC_per)
d_test <- as.dendrogram.hclust(HC_per)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
HCper <- permute(HC,OrdSer)
inherits(HCper,"hclust")
inherits(as.dendrogram(HCper)$obj,"hclust")
Dper<-as.dendrogram(HCper)
Dper
Dper$obj
inherits(Dper,"hclust")
length(HCper$order)
nobs(HCper$order)
nobs(Dper)
HCper
HC
as.dendrogram(HC)
as.dendrogram(permute(HC,ser_permutation(OrdSer))
)
as.dendrogram(permute(HC,ser_permutation_vector(OrdSer))
)
get_order(HCper)
HCper$height
getOption("max.print")
getOption("max.print") = 1004
Option("max.print")
setOption("max.print")
HCper$height[1002]
HCper$height[1003]
HCper$height[1004]
HCper$height[1005]
HC$height[1003]
HCper$merde
HCper$merge
HCper$merge[<1]
HCper$merge[,1]
HCper$merge
HC$merge
max(HC$merge[,1])
max(HC$merge[,2])
max(HCper$merge[,2])
max(HCper$merge[,1])
is.leaf(Dper)
is.leaf(Dper[])
is.leaf(Dper[1])
Dper[2]
HC$merge
HCper$merge
HCper$order
HCper$merge
min(HCper$merge)
min(HCper$merge[,1])
min(HCper$merge[,2])
min(HC$merge[,2])
min(HC$merge[,1])
golem::run_dev()
min(HC$merge[,2])
min(HC$merge[,1])
HCper <- permute(HC,OrdSer)
min(HCper$merge[,1])
min(HCper$merge[,2])
golem::run_dev()
HCper <- permute(HC,OrdSer)
is.na(HCper$merge)
is.na(HCper$order)
is.na(HCper$order)==TRUE
which(is.na(HCper$order))
HCper$order[which(is.na(HCper$order))]
HCper$order[which(is.na(HCper$order)==TRUE)]
HCper$order[which(is.na(HCper$order)==FALSE)]
Hwhich(is.na(HCper$order)==FALSE)
which(is.na(HCper$order)==FALSE)
which(is.na(HCper$merge)==TRUE)
which(is.na(HCper$merge)==FALSE)
is.na(HCper$merge)
is.na(HCper$merge[,1])
is.na(HCper$merge[,2])
is.na(HCper$merge[,3])
golem::run_dev()
golem::run_dev()
golem::run_dev()
unique(HC$merge)
unique(HC$merge[,1])
is.unique(HC$merge[,1])
!unique(HC$merge[,1])
HC$merge[,1]==unique(HC$merge[,1])
HC$merge[,1]==unique(HC$merge[,2])
HC$merge[,2]==unique(HC$merge[,2])
HC$merge==unique(HC$merge)
HCper <- permute(HC,OrdSer)
HCper$merge==unique(HCper$merge)
unique(HCper$merge[,1])
length(unique(HCper$merge[,1]))
length(unique(HCper$merge[,2]))
length(unique(HCper$merge))
golem::run_dev()
length(unique(OrdSer))
HCper <- permute(HC,OrdSer)
plot(HCper)
pdf()
plot(HCper)
dev.off()
pdf("test.pdf")
plot(HCper)
dev.off()
pdf("test1.pdf")
plot(HCper, hang=-1, labels=FALSE)
dev.off()
pdf("permute.pdf")
plot(HCper, hang=-1, labels=FALSE)
dev.off()
pdf("initial.pdf")
plot(HC, hang=-1, labels=FALSE)
dev.off()
pdf("initial_dend.pdf")
plot(as.dendrogram(HC), hang=-1, labels=FALSE)
plot(as.dendrogram(HC), labels=FALSE)
plot(as.dendrogram(HC))
dev.off()
pdf("permute_dend.pdf")
plot(as.dendrogram(HCper))
dev.off()
Dper <- as.dendrogram(HCper)
class(Dper)
nleaves(Dper)
Dper %>% nleaves
D <- as.dendrogram(HC)
nleaves(D)
D %>% nleaves
D %>% nobs
D %>% nobs()
Dper_data <- dendro_data(Dper,type="rectangle")
install.packages("ggdendro")
Dper_data <- dendro_data(Dper,type="rectangle")
library(ggdendro)
Dper_data <- dendro_data(Dper,type="rectangle")
D_data <- dendro_data(D,type="rectangle")
remove.packages("ggdendro")
golem::run_dev()
D <- as.dendrogram(HC)
ord <- DendSer.dendrogram(D,r$distml_ml(),cost=costARc)
library(dendextend)
ord <- DendSer.dendrogram(D,r$distml_ml(),cost=costARc)
ord <- DendSer.dendrogram(D,r$distml_ml())
ord <- DendSer.dendrogram(D,r$distml_ml
)
golem::run_dev()
golem::run_dev()
D <- as.dendrogram(HC)
ord <- DendSer.dendrogram(D,dist,cost=costARc)
library(dendextend)
ord <- DendSer.dendrogram(D,dist,cost=costARc)
DendSer.dendrogram()
DendSer.dendrogram
h <- as.hclust(D)
name <- HC$labels[OrdSer]
str(D)
order.dendrogram(D) <- name
length(unique(name))
order.dendrogram(D) <- OrdSer
D <- as.dendrogram(HC)
D <- order.dendrogram(D) <- OrdSer
D <- as.dendrogram(HC)
order.dendrogram(D) <- OrdSer
golem::run_dev()
golem::run_dev()
library(dendextend)
HCper <- permute(HC,OrdSer)
grDevices::pdf("HCper")
plot(HCper)
grDevices::dev.off()
grDevices::pdf("HCper.pdf")
plot(HCper,hang=-1)
grDevices::pdf("HCper.pdf")
grDevices::dev.off()
grDevices::pdf("HCper.pdf")
plot(HCper,hang=-1)
grDevices::dev.off()
grDevices::dev.off()
grDevices::pdf("HCper1.pdf")
plot(HCper,hang=-1)
grDevices::dev.off()
D <- as.dendrogram(HC)
order.dendrogram(D) <- get_order(HCper)
grDevices::pdf("dendper.pdf")
plot(D)
grDevices::dev.off()
grDevices::pdf("HCper1.pdf")
plot(HCper,hang=-1,ylab="",xlab="")
grDevices::dev.off()
ordHC = get_order(HCper)
ordD = get_order(D)
ordD==ordHC
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
class(dend'
)
''
class(dend)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
View(dend)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::set_golem_name("OrderedHeatMapAnalysis")
golem::run_dev()
install.packages("changer")
getwd()
changer(getwd(),new_name="OrderedHeatMapAnalysis")
library(changer)
changer(getwd(),new_name="OrderedHeatMapAnalysis")
update("Bioconductor")
BiocManager::version()
install.packages("BiocManager", repos = "https://cloud.r-project.org")
install.packages("BiocManager", repos = "https://cloud.r-project.org")
BiocManager::version()
BiocManager::install(version="3.18")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
remove.packages("rlang")
install.packages("rlang")
changer(getwd(),new_name="OrderedHeatMapAnalysis")
library(changer)
changer(getwd(),new_name="OrderedHeatMapAnalysis")
