)
## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "biseriatedheatmaps", # The Name of the package containing the App
pkg_title = "BSH", # The Title of the package containing the App
pkg_description = "PKG_DESC.", # The Description of the package containing the App
author_first_name = "Noe", # Your First Name
author_last_name = "Demange", # Your Last Name
author_email = "demange.noe@outlook.fr", # Your Email
repo_url = https://github.com/NoeDemange/biseriatedheatmaps # The URL of the GitHub Repo (optional)
## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "biseriatedheatmaps", # The Name of the package containing the App
pkg_title = "BSH", # The Title of the package containing the App
pkg_description = "PKG_DESC.", # The Description of the package containing the App
author_first_name = "Noe", # Your First Name
author_last_name = "Demange", # Your Last Name
author_email = "demange.noe@outlook.fr", # Your Email
repo_url = www.github.com/NoeDemange/biseriatedheatmaps # The URL of the GitHub Repo (optional)
)
## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "biseriatedheatmaps", # The Name of the package containing the App
pkg_title = "BSH", # The Title of the package containing the App
pkg_description = "PKG_DESC.", # The Description of the package containing the App
author_first_name = "Noe", # Your First Name
author_last_name = "Demange", # Your Last Name
author_email = "demange.noe@outlook.fr", # Your Email
repo_url = "github.com/NoeDemange/biseriatedheatmaps" # The URL of the GitHub Repo (optional)
)
golem
## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "biseriatedheatmaps", # The Name of the package containing the App
pkg_title = "BSH", # The Title of the package containing the App
pkg_description = "PKG_DESC.", # The Description of the package containing the App
author_first_name = "Noe", # Your First Name
author_last_name = "Demange", # Your Last Name
author_email = "demange.noe@outlook.fr", # Your Email
repo_url = "https://github.com/NoeDemange/biseriatedheatmaps" # The URL of the GitHub Repo (optional)
)
## Set {golem} options ----
golem::set_golem_options()
## Create Common Files ----
## See ?usethis for more information
usethis::use_mit_license("Golem User") # You can set another license here
usethis::use_readme_rmd(open = FALSE)
# Note that `contact` is required since usethis version 2.1.5
# If your {usethis} version is older, you can remove that param
usethis::use_code_of_conduct(contact = "Golem User")
usethis::use_lifecycle_badge("Experimental")
usethis::use_news_md(open = FALSE)
## Init Testing Infrastructure ----
## Create a template for tests
golem::use_recommended_tests()
## Favicon ----
# If you want to change the favicon (default is golem's one)
golem::use_favicon() # path = "path/to/ico". Can be an online file.
## Favicon ----
# If you want to change the favicon (default is golem's one)
golem::use_favicon(path = "D:/documents/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/biseriatedheatmaps/inst/app/www/favicon.png") # path = "path/to/ico". Can be an online file.
## Favicon ----
# If you want to change the favicon (default is golem's one)
golem::use_favicon(path = "D:/documents/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/biseriatedheatmaps/inst/app/www/favicon.png") # path = "path/to/ico". Can be an online file.
golem::remove_favicon() # Uncomment to remove the default favicon
## Favicon ----
# If you want to change the favicon (default is golem's one)
golem::use_favicon(path = "D:/documents/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/biseriatedheatmaps/inst/app/www/favicon.png") # path = "path/to/ico". Can be an online file.
golem::run_dev()
devtools::build_readme()
# go to dev/02_dev.R
rstudioapi::navigateToFile("dev/02_dev.R")
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.package('attachment') # if needed.
attachment::att_amend_desc()
## Add internal datasets ----
## If you have data in your package
usethis::use_data_raw(name = "my_dataset", open = FALSE)
## code to prepare `my_dataset` dataset goes here
my_dataset <- read.csv(file="D:/documents/stage/stage g.sapriel/Dossier_NOE/stage 1/Data/matrix_fold_spe_full.csv", header = TRUE,row.names =1,sep="")
usethis::use_data(my_dataset, overwrite = TRUE)
devtools::build_readme()
load("D:/documents/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/biseriatedheatmaps/data/my_dataset.rda")
View(my_dataset)
source("D:/documents/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/biseriatedheatmaps/data-raw/my_dataset.R")
load("D:/documents/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/biseriatedheatmaps/data/my_dataset.rda")
View(my_dataset)
View(my_dataset)
View(my_dataset)
source("D:/documents/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/biseriatedheatmaps/data-raw/my_dataset.R")
source("D:/documents/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/biseriatedheatmaps/data-raw/my_dataset.R")
View(my_dataset)
load("D:/documents/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/biseriatedheatmaps/data/my_dataset.rda")
View(my_dataset)
source("D:/documents/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/biseriatedheatmaps/data-raw/my_dataset.R")
View(my_dataset)
source("D:/documents/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/biseriatedheatmaps/R/data.R")
usethis::use_package("shinydashboard")
usethis::use_package("shinycustomloader")
usethis::use_package("shinydashboard")
usethis::use_package("shinycustomloader")
golem
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
source("D:/documents/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/biseriatedheatmaps/R/app_ui.R")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
getLoadedDLLs()
getLoadedDLLs()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
## Add modules ----
## Create a module infrastructure in R/
golem::add_module(name = "data_loading", with_test = FALSE) # Name of the module
## Add modules ----
## Create a module infrastructure in R/
golem::add_module(name = "data_loading", with_test = FALSE) # Name of the module
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::add_module(name = "data_processing", with_test = FALSE) # Name of the module
golem::add_module(name = "data_processing", with_test = FALSE) # Name of the module
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
spelling::get_wordlist()
spelling::get_wordlist(pkg=".")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()*
golem::run_dev()*
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
install.packages("shinyFeedback")
usethis::use_package("shinyFeedback")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
install.packages("shinyreforms")
usethis::use_package("shinyreforms")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::add_module(name = "heatmap_simple", with_test = FALSE) # Name of the module
golem::add_module(name = "heatmap_simple", with_test = FALSE) # Name of the module
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
usethis::use_package("ComplexHeatmap")
usethis::use_package("ComplexHeatmap")
golem::run_dev()
golem::run_dev()
usethis::use_package("stats")
usethis::use_package("utils")
golem::run_dev()
usethis::use_package("DendSer")
usethis::use_package("ade4")
usethis::use_package("cluster")
golem::run_dev()
usethis::use_package("virdis")
usethis::use_package("virdis")
usethis::use_package("viridis")
usethis::use_package("seriation")
usethis::use_package("grid")
golem::run_dev()
golem::run_dev()
golem::run_dev()
load("D:/documents/stage/stage g.sapriel/Dossier_NOE/stage 2/shiny/biseriatedheatmaps/data/my_dataset.rda")
View(my_dataset)
test <- my_dataset[rowSums(my_dataset)>=0,]
test <- my_dataset[,colSums(my_dataset)>=0]
golem::run_dev()
library(reactlog)
golem::run_dev()
reactlog_enable()
library(reactlog)
reactlog_enable()
reactlog_enable()
golem::run_dev()
mt <- as.matrix(my_dataset)
View(mt)
golem::run_dev()
golem::run_dev()
usethis::use_package("base")
usethis::use_package("base")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
install.packages("shinycssloaders")
usethis::use_package("shinycssloaders")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
detach("package:reactlog", unload = TRUE)
library(reactlog)
detach("package:reactlog", unload = TRUE)
library(reactlog)
golem::run_dev()
golem::run_dev()
golem::run_dev(options(shiny.reactlog = TRUE))
options(shiny.reactlog = TRUE)
golem::run_dev(options(shiny.reactlog = TRUE))
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
View(datamat)
View(datamat)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::add_module(name = "heatmap_split", with_test = FALSE) # Name of the module
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
usethis::use_package("gplots")
usethis::use_package("gplots")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
usethis::use_package("gplots")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
usethis::use_package("dendextend")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
